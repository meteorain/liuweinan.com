---
import Layout from "../layouts/Layout.astro";
import { placesLoader } from "../loaders/places";
import { useLocale } from '@utils/locale';

const loader = placesLoader();
const places = await loader.load();

// 获取 Mapbox token
const mapboxToken = import.meta.env.MAPBOX_TOKEN;

// 类型映射（英文到中文）
const typeMap = {
    'restaurant': '餐厅',
    'attraction': '景点',
    'hotel': '酒店',
    'cafe': '咖啡',
    'shop': '商场'
};

const { t, locale } = useLocale(Astro.url);
---

<Layout title="吃喝玩乐">
    <h1 class="text-2xl font-bold mb-4">吃喝玩乐</h1>
    
    <!-- 地图容器 -->
    <div id="map" class="w-full h-96 rounded-lg border shadow mb-4"></div>
    
    <!-- 统计信息 -->
    <div class="text-sm text-gray-500 mb-4">
        共 {places.length} 个地点
    </div>
    
    <!-- 地点列表 -->
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        {places && places.length > 0 ? (
            places.map(place => (
                <div class="mb-2 mr-2 cursor-pointer" 
                     data-place-id={place.id}
                     data-coordinates={place.coordinates}>
                    <div class="p-3 rounded-xl bg-stone-100 dark:bg-stone-800">
                        <div class="mb-2 flex flex-row">
                            <span class="accent-auto dark:accent-auto font-bold">{place.name}</span>
                            <span class="ml-auto px-2 py-0.5 rounded bg-blue-100 text-blue-600 text-xs">{typeMap[place.type] || place.type}</span>
                        </div>
                        <div class="text-sm text-gray-500">{place.location}</div>
                        <div class="text-sm">
                            {place.rating && (
                                <span class="text-amber-400">★ {place.rating}</span>
                            )}
                            {place.visit_date && (
                                <span class="font-light italic text-xs ml-2">{place.visit_date}</span>
                            )}
                            {place.moments_id && (
                                <span>
                                    {' '}
                                    |{' '}
                                    <a class="panda-link" href={`/moments/${place.moments_id}/`}>
                                        {t('reviews.review')}
                                    </a>
                                </span>
                            )}
                        </div>
                    </div>
                </div>
            ))
        ) : (
            <div class="col-span-2 text-center text-gray-400 py-8">暂无兴趣点</div>
        )}
    </div>
</Layout>

<!-- Mapbox CDN -->
<link href="https://api.mapbox.com/mapbox-gl-js/v3.13.0/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v3.13.0/mapbox-gl.js"></script>

<script define:vars={{ places, mapboxToken }}>
    // 等待 Mapbox 加载完成
    function initMap() {
        if (typeof mapboxgl === 'undefined') {
            // 如果 mapboxgl 还没加载，等待一下再试
            setTimeout(initMap, 100);
            return;
        }
        
        // 初始化地图
        mapboxgl.accessToken = mapboxToken;
        
        // 获取当前主题
        function getCurrentTheme() {
            return document.documentElement.classList.contains('dark') ? 'dark' : 'light';
        }
        
        // 根据主题获取地图样式
        function getMapStyle(theme) {
            return theme === 'dark' 
                ? 'mapbox://styles/mapbox/dark-v11' 
                : 'mapbox://styles/mapbox/streets-zh-v1';
        }
        
        const map = new mapboxgl.Map({
            container: 'map',
            style: getMapStyle(getCurrentTheme()), // 根据当前主题设置地图样式
            center: [117.190182, 39.125596], // 默认中心点（天津）
            zoom: 8
        });
        
        // 等待地图加载完成
        map.on('load', () => {
            // 添加数据源
            map.addSource('places', {
                type: 'geojson',
                data: {
                    type: 'FeatureCollection',
                    features: places.map(place => {
                                            // 解析坐标字符串 "lng,lat"
                    let coordinates = [117.190182, 39.125596]; // 默认坐标（天津）
                        if (place.coordinates) {
                            const coords = place.coordinates.split(',').map(Number);
                            if (coords.length === 2 && !isNaN(coords[0]) && !isNaN(coords[1])) {
                                coordinates = coords;
                            }
                        }
                        
                        return {
                            type: 'Feature',
                            geometry: {
                                type: 'Point',
                                coordinates: coordinates
                            },
                            properties: {
                                id: place.id,
                                name: place.name,
                                name_en: place.name_en,
                                type: place.type,
                                location: place.location,
                                rating: place.rating,
                                visit_date: place.visit_date,
                                description: place.description
                            }
                        };
                    })
                }
            });
            
            // 添加点图层
            map.addLayer({
                id: 'places-points',
                type: 'circle',
                source: 'places',
                paint: {
                    'circle-radius': [
                        'interpolate',
                        ['linear'],
                        ['zoom'],
                        8, 6,
                        12, 10,
                        16, 14
                    ],
                    'circle-color': [
                        'match',
                        ['get', 'type'],
                        'restaurant', '#dc2626', // red-600
                        'attraction', '#059669', // emerald-600
                        'hotel', '#2563eb', // blue-600
                        'cafe', '#7c3aed', // violet-600
                        'shop', '#ea580c', // orange-600
                        '#6b7280' // gray-500 默认颜色
                    ],
                    'circle-stroke-width': 2,
                    'circle-stroke-color': '#ffffff',
                    'circle-opacity': 0.8
                }
            });
            
            // 添加标签图层
            map.addLayer({
                id: 'places-labels',
                type: 'symbol',
                source: 'places',
                layout: {
                    'text-field': ['get', 'name'],
                    'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],
                    'text-offset': [0, 1.5],
                    'text-anchor': 'top',
                    'text-size': [
                        'interpolate',
                        ['linear'],
                        ['zoom'],
                        8, 10,
                        12, 12,
                        16, 14
                    ]
                },
                paint: {
                    'text-color': '#374151', // gray-700
                    'text-halo-color': '#ffffff',
                    'text-halo-width': 2
                }
            });
            
            // 创建悬浮 popup
            let hoveredPopup = null;
            
            // 类型映射（英文到中文）
            const typeMap = {
                'restaurant': '餐厅',
                'attraction': '景点',
                'hotel': '酒店',
                'cafe': '咖啡',
                'shop': '商场'
            };
            
            // 如果有地点数据，调整地图视野
            if (places.length > 0) {
                const bounds = new mapboxgl.LngLatBounds();
                places.forEach(place => {
                    if (place.coordinates) {
                        const coords = place.coordinates.split(',').map(Number);
                        if (coords.length === 2 && !isNaN(coords[0]) && !isNaN(coords[1])) {
                            bounds.extend(coords);
                        }
                    }
                });
                
                if (!bounds.isEmpty()) {
                    map.fitBounds(bounds, {
                        padding: 50,
                        maxZoom: 12
                    });
                }
            }
            
            // 监听主题变化
            const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                        const newTheme = getCurrentTheme();
                        const newStyle = getMapStyle(newTheme);
                        
                        // 切换地图样式
                        map.setStyle(newStyle);
                        
                        // 重新添加数据源和图层
                        map.once('styledata', () => {
                            // 重新添加数据源
                            map.addSource('places', {
                                type: 'geojson',
                                data: {
                                    type: 'FeatureCollection',
                                    features: places.map(place => {
                                        let coordinates = [117.190182, 39.125596];
                                        if (place.coordinates) {
                                            const coords = place.coordinates.split(',').map(Number);
                                            if (coords.length === 2 && !isNaN(coords[0]) && !isNaN(coords[1])) {
                                                coordinates = coords;
                                            }
                                        }
                                        
                                        return {
                                            type: 'Feature',
                                            geometry: {
                                                type: 'Point',
                                                coordinates: coordinates
                                            },
                                            properties: {
                                                id: place.id,
                                                name: place.name,
                                                name_en: place.name_en,
                                                type: place.type,
                                                location: place.location,
                                                rating: place.rating,
                                                visit_date: place.visit_date,
                                                description: place.description,
                                                moments_id: place.moments_id
                                            }
                                        };
                                    })
                                }
                            });
                            
                            // 重新添加点图层
                            map.addLayer({
                                id: 'places-points',
                                type: 'circle',
                                source: 'places',
                                paint: {
                                    'circle-radius': [
                                        'interpolate',
                                        ['linear'],
                                        ['zoom'],
                                        8, 6,
                                        12, 10,
                                        16, 14
                                    ],
                                    'circle-color': [
                                        'match',
                                        ['get', 'type'],
                                        'restaurant', '#dc2626',
                                        'attraction', '#059669',
                                        'hotel', '#2563eb',
                                        'cafe', '#7c3aed',
                                        'shop', '#ea580c',
                                        '#6b7280'
                                    ],
                                    'circle-stroke-width': 2,
                                    'circle-stroke-color': newTheme === 'dark' ? '#374151' : '#ffffff',
                                    'circle-opacity': 0.8
                                }
                            });
                            
                            // 重新添加标签图层
                            map.addLayer({
                                id: 'places-labels',
                                type: 'symbol',
                                source: 'places',
                                layout: {
                                    'text-field': ['get', 'name'],
                                    'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],
                                    'text-offset': [0, 1.5],
                                    'text-anchor': 'top',
                                    'text-size': [
                                        'interpolate',
                                        ['linear'],
                                        ['zoom'],
                                        8, 10,
                                        12, 12,
                                        16, 14
                                    ]
                                },
                                paint: {
                                    'text-color': newTheme === 'dark' ? '#e5e7eb' : '#374151',
                                    'text-halo-color': newTheme === 'dark' ? '#1f2937' : '#ffffff',
                                    'text-halo-width': 2
                                }
                            });
                            
                            // 重新绑定事件
                            bindMapEvents();
                        });
                    }
                });
            });
            
            // 开始监听主题变化
            observer.observe(document.documentElement, {
                attributes: true,
                attributeFilter: ['class']
            });
            
            // 绑定地图事件的函数
            function bindMapEvents() {
                // 先移除之前的事件监听器（如果存在）
                map.off('mouseenter', 'places-points');
                map.off('mouseleave', 'places-points');
                map.off('click', 'places-points');
                
                // 鼠标悬停显示 popup
                map.on('mouseenter', 'places-points', (e) => {
                    map.getCanvas().style.cursor = 'pointer';
                    
                    if (e.features.length > 0) {
                        const feature = e.features[0];
                        const properties = feature.properties;
                        
                        const typeName = typeMap[properties.type] || properties.type;
                        
                        const ratingStars = properties.rating ? 
                            '★'.repeat(Math.floor(properties.rating)) + '☆'.repeat(5 - Math.floor(properties.rating)) : '';
                        
                        const popupHTML = `
                            <div class="mb-2 mr-2">
                                <div class="p-3 rounded-xl bg-stone-100 dark:bg-stone-800">
                                    <div class="mb-2 flex flex-row">
                                        <span class="accent-auto dark:accent-auto font-bold">${properties.name}</span>
                                        <span class="ml-auto px-2 py-0.5 rounded bg-blue-100 text-blue-600 text-xs">${typeName}</span>
                                    </div>
                                    <div class="text-sm text-gray-500">${properties.location || ''}</div>
                                    <div class="text-sm">
                                        ${properties.rating ? `<span class="text-amber-400">★ ${properties.rating}</span>` : ''}
                                        ${properties.visit_date ? `<span class="font-light italic text-xs ml-2">${properties.visit_date}</span>` : ''}
                                        ${properties.moments_id ? `<span><span class="ml-2">|</span><a class="panda-link ml-1" href="/moments/${properties.moments_id}/">评论</a></span>` : ''}
                                    </div>
                                </div>
                            </div>
                        `;
                        
                        hoveredPopup = new mapboxgl.Popup({
                            closeButton: false,
                            closeOnClick: false,
                            maxWidth: '300px'
                        })
                        .setLngLat(feature.geometry.coordinates)
                        .setHTML(popupHTML)
                        .addTo(map);
                    }
                });
                
                // 鼠标离开隐藏 popup
                map.on('mouseleave', 'places-points', () => {
                    map.getCanvas().style.cursor = '';
                    if (hoveredPopup) {
                        hoveredPopup.remove();
                        hoveredPopup = null;
                    }
                });
                
                // 点击事件
                map.on('click', 'places-points', (e) => {
                    if (e.features.length > 0) {
                        const feature = e.features[0];
                        const properties = feature.properties;
                        
                        const typeName = typeMap[properties.type] || properties.type;
                        
                        const popupHTML = `
                            <div class="mb-2 mr-2">
                                <div class="p-3 rounded-xl bg-stone-100 dark:bg-stone-800">
                                    <div class="mb-2 flex flex-row">
                                        <span class="accent-auto dark:accent-auto font-bold">${properties.name}</span>
                                        <span class="ml-auto px-2 py-0.5 rounded bg-blue-100 text-blue-600 text-xs">${typeName}</span>
                                    </div>
                                    <div class="text-sm text-gray-500">${properties.location || ''}</div>
                                    <div class="text-sm">
                                        ${properties.rating ? `<span class="text-amber-400">★ ${properties.rating}</span>` : ''}
                                        ${properties.visit_date ? `<span class="font-light italic text-xs ml-2">${properties.visit_date}</span>` : ''}
                                        ${properties.moments_id ? `<span><span class="ml-2">|</span><a class="panda-link ml-1" href="/moments/${properties.moments_id}/">评论</a></span>` : ''}
                                    </div>
                                    ${properties.description ? `<div class="text-sm mt-2">${properties.description}</div>` : ''}
                                </div>
                            </div>
                        `;
                        
                        const popup = new mapboxgl.Popup({
                            closeButton: true,
                            maxWidth: '350px'
                        })
                        .setLngLat(feature.geometry.coordinates)
                        .setHTML(popupHTML)
                        .addTo(map);
                    }
                });
            }
            
            // 初始绑定事件
            bindMapEvents();
        });
        
        // 点击列表项时定位到地图上的点
        document.addEventListener('click', (e) => {
            // 如果点击的是链接，不执行定位事件
            if (e.target.tagName === 'A' || e.target.closest('a')) {
                return;
            }
            
            const placeCard = e.target.closest('[data-place-id]');
            if (placeCard) {
                const coordinates = placeCard.getAttribute('data-coordinates');
                if (coordinates) {
                    const coords = coordinates.split(',').map(Number);
                    if (coords.length === 2 && !isNaN(coords[0]) && !isNaN(coords[1])) {
                        map.flyTo({
                            center: coords,
                            zoom: 14,
                            duration: 1000
                        });
                    }
                }
            }
        });
    }
    
    // 开始初始化地图
    initMap();
</script>

<style is:global>
    /* 设置 Mapbox popup 的透明背景 */
    .mapboxgl-popup-content {
        background: transparent !important;
        border: none !important;
        box-shadow: none !important;
        padding: 0 !important;
    }
    
    .mapboxgl-popup-tip {
        display: none !important;
    }
    
    .mapboxgl-popup-close-button {
        color: #6b7280 !important;
        font-size: 18px !important;
        padding: 4px !important;
    }
    
    .mapboxgl-popup-close-button:hover {
        color: #374151 !important;
        background-color: #f3f4f6 !important;
        border-radius: 4px !important;
    }
</style> 