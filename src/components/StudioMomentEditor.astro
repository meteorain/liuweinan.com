---
// get api url from env


import {API_URL,API_SECRET} from 'astro:env/server'

const apiUrl = API_URL
const secret = API_SECRET
const {id} = Astro.props
const tags = ['影视','影评','音乐','叽叽喳喳']
---
<div id="moment-editor" data-moment-id={id}>
    <div class="mt-4 flex flex-col">
        {
            id && <label for="moment-id">
                    <h2 id="moment-id" class="mb-2">#{id}</h2>
                </label>
        }
        <label for="tag">
            <h3>Tags</h3>
            <select id="tag" class="p-1 pr-5">
                {tags.map((tag) => (
                    <option value={tag}>{tag}</option>
                ))}
            </select>
        </label>
        <label for="content">
            <h3>Content</h3>
        </label>
        <textarea rows="9" id="content"></textarea>

    </div>
    <div class="flex">
        <span id="notification" class="mt-4"></span>
        <button class="btn btn-primary mt-4 ml-auto">Submit</button>
    </div>
</div>

<script>
    import { actions } from 'astro:actions';

    function updateNotificationMessage(msg: string) {
        const notification = document.getElementById('notification');
        if (notification) {
            notification.innerText = msg;
        }
    }

    async function initIfEdit() {
        const momentEditor = document.getElementById('moment-editor');
        const momentId = momentEditor?.getAttribute('data-moment-id');
        
        if (momentId) {
            try {
                const { data } = await actions.getMoment({id:momentId} as any);
                
                if (data) {
                    const { tags, body } = data;
                    const tagSelect = document.getElementById('tag') as HTMLSelectElement;
                    const contentTextarea = document.getElementById('content') as HTMLTextAreaElement;
                    
                    if (tagSelect) tagSelect.value = tags;
                    if (contentTextarea) contentTextarea.value = body;
                } else {
                    updateNotificationMessage(`Failed to get moment info: ${momentId}`);
                }
            } catch (error) {
                updateNotificationMessage(`Error loading moment: ${error}`);
            }
        }
    }

    const getValue = (id: string): string => {
        const el = document.getElementById(id) as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
        return el ? el.value : '';
    };

    document.querySelector('.btn')?.addEventListener('click', async () => {
        try {
            const tag = getValue('tag');
            const content = getValue('content');
            const momentEditor = document.getElementById('moment-editor');
            const momentId = momentEditor?.getAttribute('data-moment-id');

            if (momentId) {
                // Update existing moment
              
                const { data } = await actions.updateMoment({
                    id: momentId,
                    tags: tag,
                    body: content
                } as any);

                if (data?.status === 200 || data?.status === 201) {
                    updateNotificationMessage('Update success!');
                } else {
                    updateNotificationMessage(`Update failed: ${data?.text || 'Unknown error'}`);
                }
            } else {
                // Create new moment
                 const { data: momentId } = await actions.createMoment({tags:tag,body:content} as any );

                if (momentId) {
                    updateNotificationMessage('Post success!');
                } else {
                    updateNotificationMessage('Post failed');
                }
            }
        } catch (error) {
            updateNotificationMessage(`Error: ${error}`);
        }
    });

    // Initialize the form if editing
    initIfEdit();
</script>