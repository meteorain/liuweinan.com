---
// Remove API imports since we're using actions now
---
<div id="review-editor">
    <div class="mt-4 flex flex-col">
        <div class="">
            <label for="id">
                <h3>Search</h3>
                <div class="flex flex-col">
                    <div>
                        <input id="search" class="mr-5"/>
                        <button class="btn btn-primary " id="btn-search">Query</button>
                    </div>
                    <select id="item-selector" class="p-[2px] mt-4">
                    </select>
                </div>
            </label>
        </div>
        <label for="btn-search">
        </label>
        <label for="id">
            <h3>IMDB ID</h3>
            <input id="id" class="mr-5"/>
            <button id="find">Find</button>
        </label>
        <!-- when small screen flex-col -->
        <div class="flex-row-or-col">
            <label for="title">
                <h3>Title</h3>
                <input id="title" class="mr-5"/>
            </label>
            <label for="title_en">
                <h3>English Title</h3>
                <input id="title_en"/>
            </label>
        </div>
        <div class="flex-row-or-col">
            <label for="media-type">
                <h3>Media type</h3>
                <input id="media-type" class="mr-5"/>
            </label>
            <label for="rating">
                <h3>Rating</h3>
                <input id="rating"/>
            </label>
        </div>

        <label for="moment-id">
            <h3>Moment Id</h3>
        </label>
        <input  id="moment-id"></input>

        <label for="content">
            <h3>Content</h3>
        </label>
        <textarea rows="9" id="content"></textarea>

    </div>
    <div class="flex">
        <span id="notification" class="mt-4"></span>
        <button id="submit" class="mt-4 ml-auto">Submit</button>
    </div>
</div>

<script>
    import { actions } from 'astro:actions';
    import { objectToFormData } from '../utils/formData';

    function updateNotificationMessage(msg: string) {
        const notification = document.getElementById('notification');
        if (notification) {
            notification.innerText = msg;
        }
    }

    async function search(keyword: string) {
        const formData = new FormData();
        formData.append('keyword', keyword);
        const { data } = await actions.searchMedia(formData);
        return data || [];
    }

    async function findEntityByTMDBId(id: string, type: string) {
        const formData = new FormData();
        formData.append('id', id);
        formData.append('type', type);
        const { data } = await actions.findEntityByTMDBId(formData);
        return data;
    }

    async function findEntity(imdb_id: string) {
        const formData = new FormData();
        formData.append('imdb_id', imdb_id);
        const { data } = await actions.findEntity(formData);
        return data;
    }

    document.getElementById('item-selector')?.addEventListener('change', async (e) => {
        const target = e.target as HTMLSelectElement;
        const id = target.value;
        const type = target.options[target.selectedIndex].innerText.split('[')[1].split(']')[0].toLowerCase();
        const entity = await findEntityByTMDBId(id, type);
        if (entity) {
            fillFields(entity);
        }
    });

    document.getElementById('btn-search')?.addEventListener('click', async () => {
        const searchInput = document.getElementById('search') as HTMLInputElement;
        const keyword = searchInput.value;
        const results = await search(keyword);
        
        // add options to select
        const select = document.getElementById('item-selector') as HTMLSelectElement;
        select.innerHTML = '';
        results.forEach(({id, title, name, media_type, release_date, first_air_date}) => {
            const _title = title ? title : name;
            const _release_date = release_date ? release_date : first_air_date;
            const option = document.createElement('option');
            option.value = id.toString();
            option.innerText = `${_title}  [${media_type.toUpperCase()}]   ${_release_date}`;
            select.appendChild(option);
        });
        
        // auto select first item
        select.selectedIndex = 0;
        if (results.length > 0) {
            const entity = await findEntityByTMDBId(results[0].id.toString(), results[0].media_type);
            if (entity) {
                fillFields(entity);
            }
        }
    });

    const setValue = (id: string, value: string | number) => {
        const el = document.getElementById(id) as HTMLInputElement;
        if (el) {
            el.value = value.toString();
        }
    };

    const getValue = (id: string): string => {
        const el = document.getElementById(id) as HTMLInputElement;
        return el ? el.value : '';
    };

    function fillFields(entity: any) {
        setValue('id', entity.imdb_id);
        setValue('title', entity.title);
        setValue('title_en', entity.title_en);
        setValue('media-type', entity.media_type);
        setValue('rating', entity.imdb_rating);
        // clean content
        setValue('content', '');
    }

    document.getElementById("find")?.addEventListener('click', async () => {
        const imdb_id = getValue('id');
        const entity = await findEntity(imdb_id);
        if (entity) {
            fillFields(entity);
        }
    });

    let entity: any = null;

    function getEditedEntity() {
        return {
            moments_id: '',
            imdb_id: getValue('id') || (entity ? entity.imdb_id : ''),
            imdb_rating: entity ? entity.imdb_rating : null,
            rated_date: new Date().toISOString(),
            release_date: entity ? entity.release_date : null,
            title: getValue('title'),
            title_en: getValue('title_en'),
            media_type: getValue('media-type'),
            rating: getValue('rating'),
            content: getValue('content')
        };
    }

    document.getElementById('submit')?.addEventListener('click', async () => {
        try {
            let lastRowId = getValue('moment-id');
            
            if (!lastRowId) {
                const tag = "影评";
                const content = getValue('content');
                
                const formData = new FormData();
                formData.append('tags', tag);
                formData.append('body', content);
                const { data: momentId } = await actions.createMoment(formData);
                lastRowId = momentId;
            }
            
            if (!lastRowId) {
                updateNotificationMessage('Failed to find or create moment');
                return;
            }
            
            const editedEntity = getEditedEntity();
            editedEntity.moments_id = lastRowId;
            
            const formData = objectToFormData(editedEntity);
            const { data } = await actions.createReview(formData);
            
            if (data?.status === 201) {
                updateNotificationMessage(`Success to create review link moment ${lastRowId}`);
            } else {
                updateNotificationMessage('Failed to create review');
            }
        } catch (e) {
            updateNotificationMessage(e.toString());
        }
    });
</script>

<style>
    .flex-row-or-col {
        /** flex row on large screen, flex col on small screen */
        display: flex;
        flex-direction: row;
        @media (max-width: 640px) {
            flex-direction: column;
        }
    }
</style>