---
// MemoryLayout.astro

import {API_URL} from 'astro:env/server'
import {getCollection} from "astro:content";
import Layout from '@layouts/Layout.astro'
import MomentCard from '@components/MomentCard.astro'
import BackLater from '@components/BackLater.astro'
import {useLocale} from '@utils/locale'
import {momentsLoader} from "../loaders/moments";

const {path, t, locale} = useLocale(Astro.url)
const {page} = Astro.props

interface PageURL {
    prev: string,
    next: string
}
interface Props {
    page: {
        currentPage: number,
        pageSize: number,
        url: PageURL
    }
}

const loader = momentsLoader()
let result = await loader.load()

// Moments Êï∞ÊçÆÊÄªÈïøÂ∫¶
const moments = (await result.moments).sort((a, b) => b.created - a.created);
const totalMoments = moments.length;

// ËÆ°ÁÆóÂàÜÈ°µ
const totalPages = Math.ceil(totalMoments / page.pageSize);
const startIdx = (page.currentPage - 1) * page.pageSize;
const endIdx = startIdx + page.pageSize;

// ÂΩìÂâçÈ°µÈù¢ÁöÑÊï∞ÊçÆÂàáÁâá
const pagedMoments = moments.slice(startIdx, endIdx);

// ‰∏∫ÊØè‰∏™ `moment` Ê∑ªÂä†Ê†áÈ¢ò
const posts = await getCollection('posts');
const momentsWithTitles = pagedMoments.map(moment => {
    const matchingPost = posts.find(post => `/posts/${post.slug}` === moment.uri);
    if (matchingPost) {
        moment.title = matchingPost.data.title;
    }
    return moment;
});

// ËÆ°ÁÆó prev Âíå next È°µÁ†Å
const prev = page.currentPage > 1 ? page.currentPage - 1 : null;
const next = page.currentPage < totalPages ? page.currentPage + 1 : null;

// ÁîüÊàêÈ°µÁ†ÅÈìæÊé•
const pageHref = (pageNum) => {
    if (!pageNum) return null;
    if (pageNum === 1) return path(`/moments`);
    return path(`/moments/p/${pageNum}`);
};
---

<Layout title={t('nav.moments')}>
    <div class="max-w-[65ch]">
        <div class="mt-8">
            {
                momentsWithTitles.map((c) =>
                    <MomentCard content={c} />
                )
            }
            {!momentsWithTitles.length && <BackLater />}
        </div>
        <div class="mt-4">
            <span>
                {
                    prev && (
                        <a href={pageHref(prev)} class="panda-link">
                            {t('pagination.previous')}
                        </a>
                    )
                }
            </span>
            <span class="float-right">
                {
                    next && (
                        <a href={pageHref(next)} class="panda-link">
                            {t('pagination.next')}
                        </a>
                    )
                }
            </span>
            {
                !Astro.url.pathname.startsWith('/moments/p/') && (
                    <script data-isso={API_URL}
                            src=`${API_URL}/js/embed.min.js`></script>

                    <section id="isso-thread">
                        <noscript>Javascript needs to be activated to view comments.</noscript>
                    </section>
                )
            }
        </div>
    </div>
</Layout>

<script type="module">
    document.addEventListener('click', async (event) => {
        const target = event.target;
        if (target && target.closest('.emoji-container')) {
            const id = target.id.split('-')[2];
            const type = target.getAttribute('data-type');
            try {
                const response = await fetch(`https://argo.liuweinan.com/id/${id}/${type === 'like' ? 'dislike' : 'like'}`, {
                  method: 'POST',
                });
                const data = await response.json();

                if (!await data.message) {
                    let rate = Math.min(5, Math.max(0, 3 + data.likes - data.dislikes));

                    const container = target.closest('.emoji-container');
                    const emojis = Array.from(container.querySelectorAll('span'));

                    emojis.forEach((emoji, index) => changeEmoji(emoji, index, rate));
                }
            } catch (error) {
                console.error('Failed to update emoji state:', error);
            }
        }
    });

    function changeEmoji(element, index, rate) {
        const flag = index >= rate;
        element.setAttribute('data-type', flag ? 'dislike' : 'like');
        element.textContent = flag ? 'ü§ç' : '‚ù§Ô∏è';
    }
</script>
