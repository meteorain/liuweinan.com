---
import {API_URL} from 'astro:env/server'
import Layout from '@layouts/Layout.astro'
import ReviewCard from '@components/ReviewCard.astro'
import BackLater from '@components/BackLater.astro'
import { useLocale } from '@utils/locale'
import { reviewsLoader } from '../loaders/reviews'
import keys from 'lodash/keys'

const { path, t, locale } = useLocale(Astro.url)
const { page } = Astro.props

interface PageURL {
    prev: string,
    next: string
}
interface Props {
    page: {
        currentPage: number,
        pageSize: number,
        url: PageURL
    }
}

const loader = reviewsLoader()
let result = await loader.load()

// Reviews Êï∞ÊçÆÊÄªÈïøÂ∫¶
const reviews = (await result.reviews).sort((a, b) => b.created - a.created);
const totalReviews = reviews.length;

// ËÆ°ÁÆóÂàÜÈ°µ
const totalPages = Math.ceil(totalReviews / page.pageSize);
const startIdx = (page.currentPage - 1) * page.pageSize;
const endIdx = startIdx + page.pageSize;

// ÂΩìÂâçÈ°µÈù¢ÁöÑÊï∞ÊçÆÂàáÁâá
const pagedReviews = reviews.slice(startIdx, endIdx);

// ËÆ°ÁÆó prev Âíå next È°µÁ†Å
const prev = page.currentPage > 1 ? page.currentPage - 1 : null;
const next = page.currentPage < totalPages ? page.currentPage + 1 : null;

console.info("====>", page.currentPage, prev, next);


// ÁîüÊàêÈ°µÁ†ÅÈìæÊé•
const pageHref = (pageNum) => {
    if (!pageNum) return null;
    if (pageNum === 1) return path(`/reviews`);
    return path(`/reviews/p/${pageNum}`);
};

// group reviews to quarter year
const groupedReviews = pagedReviews.reduce((acc, review) => {
    const date = new Date(review.created * 1000) // Â∞ÜÊó∂Èó¥Êà≥ËΩ¨Êç¢‰∏∫ÊØ´Áßí
    const year = date.getFullYear()
    const quarter = Math.floor(date.getMonth() / 3) + 1
    const key = `${year}Q${quarter}`
    if (!acc[key]) {
        acc[key] = []
    }
    acc[key].push(review)
    return acc
}, {})
---

<Layout title={t('nav.reviews')} navbar={true}>
    <div id="reviews-container" data-api={API_URL} class="max-w-[65ch]">
        <div class="mt-8">
            {
                keys(groupedReviews).map((k) => {
                    var g = groupedReviews[k]
                    return (
                        <div class="mb-2">
                            <h2 class="text-2xl italic font-bold">{k}</h2>
                            <div class="grid grid-cols-2">
                                {
                                    g.map((i) => {
                                        return <ReviewCard content={i} />
                                    })
                                }
                            </div>
                        </div>
                    )
                })
            }
            {!reviews.length && <BackLater />}
        </div>
        <div class="mt-4">
            <span>
                {
                    prev && (
                        <a href={pageHref(prev)} class="panda-link">
                            {t('pagination.previous')}
                        </a>
                    )
                }
            </span>
            <span class="float-right">
                {
                    next && (
                        <a href={pageHref(next)} class="panda-link">
                            {t('pagination.next')}
                        </a>
                    )
                }
            </span>
        </div>
    </div>
</Layout>

<script type="module">
    document.addEventListener('click', async (event) => {
        const apiUrl = document.getElementById('reviews-container').getAttribute('data-api');
        const target = event.target;
        if (target && target.closest('.emoji-container')) {
            const id = target.id.split('-')[2];
            let type = target.getAttribute('data-type') === 'like' ? 'dislike' : 'like';
            if (target.getAttribute('data-type') == 'like' && target.id.split('-')[3] == '4') type = 'like';
            if (target.getAttribute('data-type') == 'dislike' && target.id.split('-')[3] == '0') type = 'dislike';
            try {
                const response = await fetch(`${apiUrl}/id/${id}/${type}`, {
                  method: 'POST',
                });
                const data = await response.json();
                if (!await data.message) {
                    let rate = 3 + data.likes - data.dislikes;
                    console.info('vote successfully: ', rate);
                    const container = target.closest('.emoji-container');
                    const emojis = Array.from(container.querySelectorAll('span'));

                    emojis.forEach((emoji, index) => changeEmoji(emoji, index, rate));
                }
            } catch (error) {
                console.error('Failed to update emoji state:', error);
            }
        }
    });

    function changeEmoji(element, index, rate) {
        const flag = index >= rate;
        element.setAttribute('data-type', flag ? 'dislike' : 'like');
        element.textContent = flag ? 'ü§ç' : '‚ù§Ô∏è';
    }
</script>